AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Mappings:
  Database:
    Name:
      Value: SocialMediaMasterDB
    Username:
      Value: socialmediauser
    Password:
      Value: socialmediapass
    Identifier:
      Value: socialmediadb
Resources:
  SocialMediaMasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier:
        Fn::FindInMap:
        - Database
        - Identifier
        - Value
      DBName:
        Fn::FindInMap:
        - Database
        - Name
        - Value
      Engine: postgres
      MasterUsername:
        Fn::FindInMap:
        - Database
        - Username
        - Value
      MasterUserPassword:
        Fn::FindInMap:
        - Database
        - Password
        - Value
    DeletionPolicy: Snapshot
  SocialMediaAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: SocialMediaCognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          SocialMediaCognitoUserPoolAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - SocialMediaCognitoUserPool
              - Arn
  SocialMediaCore:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.hello
      Runtime: nodejs10.x
      CodeUri: s3://cf-templates-1j38krxlf5m0l-eu-west-1/911272cb4584145d391e9985a0c8d79d
      Environment:
        Variables:
          DB_HOST:
            Fn::GetAtt:
            - SocialMediaMasterDB
            - Endpoint.Address
          DB_NAME:
            Fn::FindInMap:
            - Database
            - Name
            - Value
          DB_USER:
            Fn::FindInMap:
            - Database
            - Username
            - Value
          DB_PASS:
            Fn::FindInMap:
            - Database
            - Password
            - Value
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: SocialMediaAPI
            Path: /hello
            Method: GET
  SocialMediaCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam_api_gateway_cup_auth_cognito_user_pool
      LambdaConfig:
        PreSignUp:
          Fn::GetAtt:
          - PreSignupLambdaFunction
          - Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
  SocialMediaCognitoUserDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: SocialMediaAPI
      UserPoolId:
        Ref: SocialMediaCognitoUserPool
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: sam_api_gateway_cup_auth_cognito_client
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthScopes:
      - email
      - openid
      CallbackURLs:
      - http://localhost:3000/
      LogoutURLs:
      - http://localhost:3000/
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: SocialMediaCognitoUserPool
  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "exports.handler = async (event, context, callback) => {\n  event.response\
        \ = { autoConfirmUser: true }\n  return event\n}\n"
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs10.x
      Timeout: 3
  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreSignupLambdaFunction
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${SocialMediaCognitoUserPool}
Outputs:
  Region:
    Description: Region
    Value:
      Ref: AWS::Region
  ApiId:
    Description: API ID
    Value:
      Ref: SocialMediaAPI
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${SocialMediaAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/
  CognitoUserPoolId:
    Description: Cognito User Pool Id
    Value:
      Ref: SocialMediaCognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client Id
    Value:
      Ref: CognitoUserPoolClient
